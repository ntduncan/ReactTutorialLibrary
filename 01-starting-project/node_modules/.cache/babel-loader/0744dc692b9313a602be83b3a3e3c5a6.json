{"ast":null,"code":"var _jsxFileName = \"/Users/nathanduncan/react/ReactTutorialLibrary/01-starting-project/src/components/SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useRef, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      console.log(\"Name Input is valid\");\n    }\n  }, [enteredNameIsValid]);\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n  };\n\n  const nameInputChangeHandler = event => {\n    setEnteredNameTouched(true);\n    setEnteredName(event.target.value);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(true);\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true); //Using state onChange is better if you need the input monitored more than once\n\n    console.log(enteredName); //Ref is better if you only need the value once\n\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n    setEnteredName(\"\");\n  };\n\n  const nameInputClasses = !enteredNameIsValid && enteredNameTouched ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredName,\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), !enteredNameIsValid && enteredNameTouched && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-text\",\n      children: \"Name must not be empty\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 53\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"bm/27lsNsiIXuRMukf2inprCLH4=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["/Users/nathanduncan/react/ReactTutorialLibrary/01-starting-project/src/components/SimpleInput.js"],"names":["useState","useRef","useEffect","SimpleInput","props","nameInputRef","enteredName","setEnteredName","enteredNameIsValid","setEnteredNameIsValid","enteredNameTouched","setEnteredNameTouched","console","log","nameInputBlurHandler","event","trim","nameInputChangeHandler","target","value","formSubmissionHandler","preventDefault","enteredValue","current","nameInputClasses"],"mappings":";;;AAAA,SAAQA,QAAR,EAAkBC,MAAlB,EAA0BC,SAA1B,QAA0C,OAA1C;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC7B,QAAMC,YAAY,GAAGJ,MAAM,EAA3B;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACQ,kBAAD,EAAqBC,qBAArB,IAA8CT,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACU,kBAAD,EAAqBC,qBAArB,IAA8CX,QAAQ,CAAC,KAAD,CAA5D;AAEAE,EAAAA,SAAS,CAAC,MAAK;AACb,QAAGM,kBAAH,EAAsB;AACpBI,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD;AACF,GAJQ,EAIN,CAACL,kBAAD,CAJM,CAAT;;AAMA,QAAMM,oBAAoB,GAAGC,KAAK,IAAI;AACpCJ,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAGL,WAAW,CAACU,IAAZ,OAAuB,EAA1B,EAA6B;AAC3BP,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD;AACF,GAPD;;AASA,QAAMQ,sBAAsB,GAAGF,KAAK,IAAI;AACtCJ,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAJ,IAAAA,cAAc,CAACQ,KAAK,CAACG,MAAN,CAAaC,KAAd,CAAd;;AACA,QAAGb,WAAW,CAACU,IAAZ,OAAuB,EAA1B,EAA6B;AAC3BP,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACD;AACF,GAND;;AAQA,QAAMW,qBAAqB,GAAGL,KAAK,IAAI;AAErCA,IAAAA,KAAK,CAACM,cAAN;;AAEA,QAAGf,WAAW,CAACU,IAAZ,OAAuB,EAA1B,EAA6B;AAC3BP,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD;;AAEDA,IAAAA,qBAAqB,CAAC,IAAD,CAArB,CATqC,CAWrC;;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYP,WAAZ,EAZqC,CAcrC;;AACA,UAAMgB,YAAY,GAAGjB,YAAY,CAACkB,OAAb,CAAqBJ,KAA1C;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYS,YAAZ;AACAf,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAlBD;;AAoBA,QAAMiB,gBAAgB,GAAG,CAAChB,kBAAD,IAAuBE,kBAAvB,GAA4C,sBAA5C,GAAqE,cAA9F;AAEA,sBACE;AAAM,IAAA,QAAQ,EAAEU,qBAAhB;AAAA,4BACE;AAAK,MAAA,SAAS,EAAEI,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACA,QAAA,IAAI,EAAC,MADL;AAEA,QAAA,EAAE,EAAC,MAFH;AAGA,QAAA,KAAK,EAAElB,WAHP;AAIA,QAAA,QAAQ,EAAEW,sBAJV;AAKA,QAAA,MAAM,EAAEH,oBALR;AAMA,QAAA,GAAG,EAAET;AANL;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAWG,CAACG,kBAAD,IAAuBE,kBAAvB,iBAA6C;AAAG,MAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXhD,eAYE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD,CArED;;GAAMP,W;;KAAAA,W;AAuEN,eAAeA,WAAf","sourcesContent":["import {useState, useRef, useEffect} from 'react'\n\nconst SimpleInput = (props) => {\n  const nameInputRef = useRef();\n  const [enteredName, setEnteredName] = useState(\"\");\n  const [enteredNameIsValid, setEnteredNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  useEffect(()=> { \n    if(enteredNameIsValid){\n      console.log(\"Name Input is valid\")\n    }\n  }, [enteredNameIsValid])\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n\n    if(enteredName.trim() === ''){\n      setEnteredNameIsValid(false)\n      return;\n    }\n  }\n\n  const nameInputChangeHandler = event => {\n    setEnteredNameTouched(true);\n    setEnteredName(event.target.value)\n    if(enteredName.trim() === ''){\n      setEnteredNameIsValid(true);\n    } \n  }\n\n  const formSubmissionHandler = event => {\n\n    event.preventDefault();\n\n    if(enteredName.trim() === ''){\n      setEnteredNameIsValid(false)\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n\n    //Using state onChange is better if you need the input monitored more than once\n    console.log(enteredName);\n\n    //Ref is better if you only need the value once\n    const enteredValue = nameInputRef.current.value\n    console.log(enteredValue)\n    setEnteredName(\"\")\n  }\n\n  const nameInputClasses = !enteredNameIsValid && enteredNameTouched ? 'form-control invalid' : 'form-control'\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input \n        type='text' \n        id='name' \n        value={enteredName} \n        onChange={nameInputChangeHandler} \n        onBlur={nameInputBlurHandler}\n        ref={nameInputRef}/>\n      </div>\n      {!enteredNameIsValid && enteredNameTouched && <p className=\"error-text\">Name must not be empty</p>}\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"]},"metadata":{},"sourceType":"module"}